<!doctype html>
<html>
  <head>
    <title>{{ page_title }}</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="description" content="{{ page_description | escape }}">
    <link rel="canonical" href="{{ canonical_url }}">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link
      rel="preconnect"
      href="https://fonts.gstatic.com"
      crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Work+Sans:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">

    <meta name="viewport" content="width=device-width,initial-scale=1,shrink-to-fit=no">
    {{ content_for_header }}
    <!-- Header hook for plugins -->
    {{ 'application.css' | asset_url | stylesheet_tag }}
    {{ 'application.js' | asset_url | script_tag }}
    {{ 'tailwind.output.css' | asset_url | stylesheet_tag }}

    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>

    <style>
      html {
        scroll-behavior: smooth;
      }

      [x-cloak] {
        display: none !important;
      }
    </style>
  </head>
  <body>
    {% section 'navbar' %}

    {% render 'sidebar-cart' %}

    <main role="main">
      {{ content_for_layout }}
    </main>

    {% comment %} {% section 'footer' %} {% endcomment %}

    <script>
        document.addEventListener('alpine:init', () => {
          Alpine.store('cart', {
            items: [],
            itemCount: 0,
            totalPrice: 0,
            
            fetchCartData() {
              fetch('/cart.js')
                .then(response => response.json())
                .then(cart => {
                  this.items = cart.items.map(item => {
      
                    const formatted_price = new Intl.NumberFormat('en-US', {
                      style: 'currency',
                      currency: 'USD' // add store currency
                    }).format(item.original_line_price / 100);
      
                    return({
                    ...item,
                    formatted_price: formatted_price
                  })}); 
      
                  this.itemCount = cart.item_count;
      
                  const formatted_total_price = new Intl.NumberFormat('en-US', {
                      style: 'currency',
                      currency: 'USD' 
                    }).format(cart.total_price / 100);
      
                  this.totalPrice = formatted_total_price;
                })
                .catch(error => console.error('Error fetching cart data:', error));
            },
      
            remove(line) {
              fetch('/cart/change.js', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({ id: line, quantity: 0 }),
                })
                  .then(() => this.fetchCartData())
                  .catch(error => console.error('Error removing item:', error));
              },
      
              updateQuantity(key, quantity) {
                // Ensure quantity is at least 1
                quantity = Math.max(1, Number(quantity));
                
                fetch('/cart/update.js', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                  },
                  body: JSON.stringify({
                    updates: {
                      [key]: quantity
                    }
                  })
                })
                .then(response => response.json())
                .then(cart => {
                  // Refresh cart data
                  this.fetchCartData();
                })
                .catch(error => {
                  console.error('Error updating cart:', error);
                });
              }
            });
          });
    </script>

  </body>
</html>