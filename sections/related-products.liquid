{% style %}
  .product-recommendations {
    text-align: left;

    h2 {
    ;
    /* margin: auto; */
  }

  .grid {
    grid-template-columns: repeat(4, 1fr);
    gap: 20px;

    @media only screen and (max-width: 400px) {
      grid-template-columns: 1fr;
    }
  }

  .card {
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    width: 100%;
  }

  .overlay {
    opacity: 0;
    transition: all ease-in-out 0.3s;
    z-index: -1;
  }

  .card-container:hover .overlay {
    opacity: 1;
    z-index: 1;
  }
}

.product-card {
  .card {
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    width: 100%;
  }
}
{% endstyle %}

{% if section.settings.show_recommendations %}
  <div class="w-[95%] mx-auto product-recommendations mt-16 mb-8" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related">
    {%- if recommendations.performed? and recommendations.products_count > 0 -%}
      <div class="w-full my-4 flex flex-col justify-start">
        <p class="w-[90%] md:w-[20%] uppercase font-[500] text-sm md:text-base">
          See Related items
        </p>
        <h2 class="w-[90%] calvino font-[500] text-[50px] md:text-[100px]">
          You may also like
        </h2>
      </div>

      <div class="w-full mx-auto grid gap-8">
        {% for product in recommendations.products %}
          {% render "product-card"
            , product: product %}
        {% else %}
          <p>No products found.</p>
        {% endfor %}
      </div>
    {%- endif -%}
  </div>
{% endif %}


<script>
    document.addEventListener('DOMContentLoaded', () => {
      const productRecommendationsSection = document.querySelector('.product-recommendations');
      if (!productRecommendationsSection) return;
    
      const observer = new IntersectionObserver((entries, observer) => {
        if (!entries[0].isIntersecting) return;
        observer.unobserve(entries[0].target);
    
        const url = entries[0].target.dataset.url;
    
        fetch(url)
          .then(response => response.text())
          .then(text => {
            const html = document.createElement('div');
            html.innerHTML = text;
            const recommendations = html.querySelector('.product-recommendations');
    
            if (recommendations && recommendations.innerHTML.trim().length) {
              entries[0].target.innerHTML = recommendations.innerHTML;
              attachEventListeners(); // Attach event listeners after content is loaded
            }
          })
          .catch(e => {
            console.error('Error fetching recommendations:', e);
          });
      }, { rootMargin: '0px 0px 200px 0px' });
    
      observer.observe(productRecommendationsSection);
      attachEventListeners(); // Attach event listeners on initial load
    });
    
    const attachEventListeners = () => {
      document.querySelectorAll('.add_to_cart').forEach(item => {
        item.addEventListener('click', event => {
          event.preventDefault(); // Prevent default form submission
          const id = item.getAttribute('data-id');
          fetch(`/cart/add.js?id=${id}&quantity=1`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(response => response.json())
          .then(data => {
            console.log(data);
            window.location.href = '/cart';
          })
          .catch((error) => {
            console.error('Error:', error);
          });
        });
      });
    };
</script>

{% schema %}
  {
    "name": "Related products",
    "settings": [
      {
        "type": "checkbox",
        "id": "show_recommendations",
        "label": "Show recommendations",
        "default": true
      }
    ]
  }
{% endschema %}